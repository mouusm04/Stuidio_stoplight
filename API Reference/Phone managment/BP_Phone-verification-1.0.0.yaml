openapi: 3.0.0
info:
  title: Sample Access Code Flow OAuth2 Project
  description: "\n\nKM Metadata Services\n\nAPI Documentation\n\nVersion 1.0.0\n\n14 January 2022\n\n# Proprietary Rights\n\nThe information contained in this document is proprietary and confidential to\nBlackSwan Technologies This material may not be duplicated, published, or\ndisclosed, in whole or in part, without the prior written permission of\nBlackSwan Technologies.\n\n# Summary of Changes** **\n\n| **Version** | **Description** |\n|-------------|-----------------|\n| 1.0.0       | Initial Draft   |\n\n# Table of Contents\n\n\n\n# Chapter 1: Introduction\n\nThis chapter will provide an overview of KM metadata services, as well as\nvarious metadata models and examples.\n\n[What is Knowledge Mesh (KM) Metadata services? 6](#_What_is_Knowledge)\n\n[Metadata model 6](#metadata-model)\n\n[Examples 7](#examples)\n\n## \n\n## \n\n## What is Knowledge Mesh (KM) Metadata services?\n\nThe purpose of this service is to provide an API that enables developers to\naccess domain metadata and define application metadata using the domain metadata\nor by introducing application specific metadata on top of a predefined metadata\nmodel.\n\nThese abilities can be used in order to support application runtime use cases\nsuch as serving the user interface and obtaining metadata such as fetchers and\ndata transformation mappings during ingestion operations.\n\nThe relative position of KM SDK in the Element SDK is depicted on the conceptual\ndiagram below:\n\n![](media/f457089517255a53c002d9559bf751d2.png)\n\n## Metadata Model\n\nThe following section describes the different metadata resources and what they\nrepresent.\n\n| **Metadata Resources**       | **Description**                                                                                                                                                      |\n|------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Domain                       | A KM domain, such as \"healthcare\" or \"company research\".                                                                                                             |\n| Domain Knowledge Model (DKM) | A default KG schema of a KM domain.                                                                                                                                  |\n| Application                  | An application created by a user in a certain domain.                                                                                                                |\n| Agent                        | Any agent involved in the KM, acting as an owner, creator, provider etc. of different resources.                                                                     |\n| Data Catalog                 | The catalog of data sources associated with a specific domain.                                                                                                       |\n| Data Source                  | A KM data source available to applications.                                                                                                                          |\n| Application Data Source      | A data source connected to an application. This could be provided by the platform (in which case it should reference a data source owned by BST) or by application.  |\n| Fetcher                      | A service providing access to a (fragment of a) dataset. It exposes some data querying interface and serves results in a specific format.                            |\n| Data Mapping                 | A formal specification of a mapping from a data source (as served by a fetcher) to a DKM.                                                                            |\n| Term                         | An individual term (entity/relationship/attribute type or a taxonomy concept), such as \"Person\", \"worksFor\", \"Trojan technique\".                                     |\n| Application Term             | An individual term (entity/relationship/attribute type or a taxonomy concept), used in an application schema.                                                        |\n| Attribute Matcher            | An attribute matcher                                                                                                                                                 |\n| Application Schema           | A KG (Knowledge Graph) schema of an application.                                                                                                                     |\n\n## \n\n## Examples\n\nThis section covers some common use cases where the KM Metadata Service gets\ninvolved.\n\n### View domains, data sources and terms\n\nThe following endpoints can be utilized with the relevant query parameters\n(refer to the API Reference) to view domain, data sources and terms.\n\n| Purpose                              | Endpoint                            |\n|--------------------------------------|-------------------------------------|\n| View list of domains                 | /domains                            |\n| View list of datasources of a domain | /data_sources?domain_id={domain_id} |\n| View terms of a domain               | /terms?domain_id={domain_id}        |\n\n### Create an app\n\nThe following diagram indicates the endpoint to be invoked when registering an\napplication metadata resource with knowledge mesh. As shown in the diagram, when\nan application metadata resource is created, an empty application schema\nresource for the application is also created automatically.\n\n![](media/aa124e1198a90e410f7fcde80a9c3888.png)\n\n### Create app schema\n\nThe application schema is a collection of terms (Entities, Attributes and\nRelationships) that define the application’s data model. The following diagram\nillustrates the sequence of API calls involved in the typical process of\ncreating an application schema:\n\n1.  First, the terms of the domain (i.e. organization research) for a given\n    application are obtained.\n\n2.  The required / suitable list of terms is chosen from the domain, renamed,\n    weighted, and even application specific terms are created if required by the\n    user / your application.\n\n3.  Finally, the list of terms is added to the app schema, keeping in mind to\n    indicate the target reference correctly for terms imported from the domain.\n    In other words, these new terms are added to the app schema, any terms that\n    were imported from the domain should indicate the ID of the domain term as\n    the target reference.\n\n![](media/c33a337e93d7c08fedf701dc5633c40e.png)\n\n### \n\n### Import data sources from domain to application\n\n### \n\nThe knowledge mesh metadata comes with predefined data sources with fetchers and\nmappings targeting various domains within the knowledge mesh. This example\nhighlights how these data sources can be utilized within an application.\n\n1.  Get a list of data sources for the given domain of the application.\n\n2.  Pick the data sources you wish to use by looking at the description, website\n    etc.\n\n3.  Add additional application specific metadata to the data source such as the\n    KG (Knowledge Graph) usage category (the context in which this source is to\n    be treated by KG operations), data validity period (frequency at which data\n    should be refreshed) and custom tags (additional information you would like\n    to store about the data source that you would like to include, that is not\n    part of the predefined metadata mode).\n\n4.  Add the datasource to the application.\n\n![](media/9b8294db1f1b02e8645fd68b7f5dbdf5.png)\n\n### Update attribute credibilities of data sources added to applications\n\nEach data source added to an application can be configured in terms of the\ncredibility it represents in the context of a given domain, entity type term and\nattribute type term. This example explains how this can be achieved.\n\nThe key concept to understand here is the Data Mapping metadata resource. The\nData Mapping is what has information about a data source in the context of a\ndomain and entity type term. In this respect, it also contains the information\nrelated to the credibility of a given source for a given domain, entity type\nterm and even the attributes of this entity type. Therefore, setting the\nattribute level / overall credibility of an app data source in the context of a\ndomain and entity type term is achieved by updating the data mapping.\n\n![](media/6d3d6f3565edc6c0e4a8f60a2c12c39f.png)\n\n# Chapter 2 Getting Started\n\nIn this chapter you will learn about authorization and authentication, configure\ndifferent user role, and how to use the Knowledge Mesh metadata service API to\nsend your first API call.\n\n[Authorization and Authentication](#_Toc93136765)\n\n[Make your First Call](#make-your-first-call)\n\n[API Request and Response](#_Toc93136769)\n\n[Abbreviations and Terms](#abbreviations-and-terms)\n\n### Authorization and Authentication\n\nThe KM Metadata API supports bearer token-based authentication, which must be\nincluded in the Authorization header of every request.\n\nIn order to authenticate such tokens and obtain authorization data, it leverages\nanother BST service named the “Access Management Service”.\n\nAccess Management Service should be deployed with access to the relevant cloud\nIDP.\n\nThe following diagram illustrates this process at a very high level.\n\n![](media/a25184f9c7653d47b993051ee15a232c.png)\n\nThe access management plays 2 roles:\n\n1.  Abstracts the actual cloud IDP by communicating with multiple cloud IDPs,\n    and shielding the consumer service from the underlying communication.\n\n2.  Contains information that maps client roles defined in the IDP end with\n    service specific permissions.\n\nTherefore, in order to handle authentication and authorization, the following\nsteps need to be carried out.\n\n1.  Setting up a user and assigning the required roles to that user within the\n    IDP.\n\n2.  Mapping the above created roles to service specific permissions within the\n    BST Access Management Service.\n\n    The below diagram illustrates the high steps involved in setting up\n    authentication and authorization.\n\n![](media/0a675fcdcc7472c343988c96f6d85583.png)\n\n### \n\n### How to Configure Users and Roles on Specific Cloud IDPs\n\nThe following table highlights the various permissions supported by KM Metadata\nService, and what endpoints are authorized by each permission.\n\n| Permission Name      | Allows endpoints| HTTP Method     |\n|----------------------||-----------------|\n| admin                ||                 |\n| view_domain_metadata | /dkm/{dkm_id} /domains /domains/{domain_id} /term_attribute_matchers /term_attribute_matchers/{matcher_id} /catalogs /catalogs/{catalog_id} /data_sources /data_sources/{data_source_id} /terms /terms/{term_id} /fetchers /fetchers/{fetcher_id} /data_mappings data_mappings/{mapping_id}                                                                                                                                                                                                                                                  | GET             |\n| view_app_metadata    | /applications /agents/{agent_id} /applications/{app_id}/schema /applications/{app_id}/schema/relationships /applications/{app_id}/schema/entities /applications/{app_id}/schema/{term_id} /applications/{app_id}/datasources /applications/{app_id}/datasources/{datasource_id} /applications/{app_id}/fetchers /applications/{app_id}/fetchers/{fetcher_id} /applications/{app_id}/term_attribute_matchers /applications/{app_id}/term_attribute_matchers/{matcher_id} /applications/{app_id}/term_attribute_matchers/{matcher_id}/artifact | GET             |\n| update_app_metadata  | /applications /agents/{agent_id} /applications/{app_id}/schema /applications/{app_id}/schema/relationships /applications/{app_id}/schema/entities /applications/{app_id}/schema/{term_id} /applications/{app_id}/datasources /applications/{app_id}/datasources/{datasource_id} /applications/{app_id}/fetchers /applications/{app_id}/fetchers/{fetcher_id} /applications/{app_id}/term_attribute_matchers /applications/{app_id}/term_attribute_matchers/{matcher_id} /applications/{app_id}/term_attribute_matchers/{matcher_id}/artifact | POST/PUT/DELETE |\n\n### Setting up BST Access Management Service\n\nThis section provides details on how to map the above user roles defined in the\nIDP, to service permissions on the BST Access Management Service.\n\n![](media/a371b5024fae0196d0e69d1a602aba04.jpg)\n\n**Step-1: Create Roles**\n\nInvoke Roles endpoint\n\n| POST /roles/ |\n|--------------|\n\n| curl -X 'POST' \\\\  'https://editor.swagger.io/v1/roles' \\\\  -H 'accept: application/json' \\\\  -H 'Content-Type: application/json' \\\\  -d '{  \"role_id\": 0,  \"name\": \"string\",  \"description\": \"string\",  \"created_on\": {},  \"modified_on\": {},  \"is_modifiable\": true,  \"is_removable\": true,  \"is_system\": true,  \"color\": \"string\",  \"icon\": \"string\",  \"feature_permission_groups\": [  {  \"association_id\": 0,  \"feature_permission_group\": [  {  \"fpg_id\": 0,  \"name\": \"string\",  \"description\": \"string\",  \"permission_list\": [  {  \"association_id\": 0,  \"permission\": [  {  \"permission_id\": 0,  \"sp_id\": \"string\",  \"permission\": \"string\",  \"level\": \"visible\"  }  ]  }  ]  }  ]  }  ] }' |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\n**Step-2: Create Permissions Group**\n\nInvoke Permissions endpoint\n\n| POST /feature_permission_groups/ |\n|----------------------------------|\n\n| curl -X 'POST' \\\\  'https://editor.swagger.io/v1/feature_permission_groups' \\\\  -H 'accept: application/json' \\\\  -H 'Content-Type: application/json' \\\\  -d '{  \"fpg_id\": 0,  \"name\": \"string\",  \"description\": \"string\",  \"permission_list\": [  {  \"association_id\": 0,  \"permission\": [  {  \"permission_id\": 0,  \"sp_id\": \"string\",  \"permission\": \"string\",  \"level\": \"visible\"  }  ]  }  ] }' |\n|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\n**Step-3: Assign Permission Group to Roles**\n\n| POST /roles/{role_id}/feature_permission_groups/{feature_permission_group_id} |\n|-------------------------------------------------------------------------------|\n\n| curl -X 'POST' \\\\  'https://editor.swagger.io/v1/roles/1/feature_permission_groups/124121' \\\\  -H 'accept: application/json' \\\\  -d '' |\n|----------------------------------------------------------------------------------------------------------------------------------------|\n\n**Step-4: Create User Permissions**\n\n| POST /service_providers/{sp_id}/permissions |\n|---------------------------------------------|\n\n| curl -X 'POST' \\\\  'https://editor.swagger.io/v1/service_providers/sp1/permissions' \\\\  -H 'accept: application/json' \\\\  -H 'Content-Type: application/json' \\\\  -d '[  {  \"permission_id\": 0,  \"sp_id\": \"string\",  \"permission\": \"string\",  \"level\": \"visible\"  } ]' |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\n**Step-5: Assign Permissions to Permission Group**\n\n| POST /feature_permission_groups/{feature_permission_group_id}/permissions/{permission_id} |\n|-------------------------------------------------------------------------------------------|\n\n| curl -X 'POST' \\\\  'https://editor.swagger.io/v1/feature_permission_groups/12/permissions/12314' \\\\  -H 'accept: application/json' \\\\  -d '' |\n|----------------------------------------------------------------------------------------------------------------------------------------------|\n\n## \n\n### Make your First Call\n\nThis section will walk you through making your first API call to get domain\ninformation.\n\nFormat your request using the curl example below.\n\n| curl -X 'GET' \\\\  'https://{km_metadata_service_server}/domains?app_id=app_id' \\\\  -H 'accept: application/json'  |\n|-------------------------------------------------------------------------------------------------------------------|\n\n### \n\n### API Request and Response\n\n| Endpoint        | /domains                                                                                                                                                               |\n|-----------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Request Body    | https:// {km_metadata_service_server}/domains?app_id=12                                                                                                                |\n| Response Format | [  {  \"id\": \"string\",  \"type\": \"Domain\",  \"label\": \"string\",  \"description\": \"string\",  \"has_dkm\": [  {  \"id\": \"string\",  \"type\": \"DKM\",  \"label\": \"string\"  }  ]  } ] |\n\n### Abbreviations and Terms\n\n| **Abbreviations** | **Definition**  |\n|-------------------|-----------------|\n| KM                | Knowledge Mesh  |\n| KG                | Knowledge Graph |\n\n# Chapter 3 API Reference\n\nThis section lists all the available API endpoints, that allow you to use the\ndifferent capabilities provided by the KM metadata services.  \n\nDomain Knowledge Model\n\n[Domains](#domains)\n\n[Applications](#_Toc93136777)\n\n### Domain Knowledge Model\n\nDomain knowledge API allows you to get the details of a specific domain\nknowledge model. Each domain knowledge model is identified by a unique id, which\nis made up of a string and is unique to the that domain.\n\n### Details of a knowledge model\n\n| HTTP Method | GET                                       |\n|-------------|-------------------------------------------|\n| End Point   | /dkm/{dkm_id}                             |\n| Description | Get details of a specific knowledge model |\n\nRequest Parameters\n\n| **Name** | **Description**            | **Data Type** | **Required** |\n|----------|----------------------------|---------------|--------------|\n| dkm_id   | URL encoded ID of the DKM. | String        | Yes          |\n\nExample Request\n\n|  curl GET https://{km_metadata_service_server}/dkm/{dkm_id} |\n|-------------------------------------------------------------|\n\nResponse Parameters\n\n| **Name** | **Description**                       | **Data Type** | **Required** |\n|----------|---------------------------------------|---------------|--------------|\n| id       | Unique identifier for the given user. | string        | Yes          |\n| type     | Type                                  | DKM           | Yes          |\n| label    | Label                                 | string        | Yes          |\n\n### \n\nExample Response\n\n| {  \"id\": \"string\",  \"type\": \"DKM\",  \"label\": \"string\" } |\n|---------------------------------------------------------|\n\n### \n\nResponse Status\n\n| **Name** | **Description**      |\n|----------|----------------------|\n| 200      | successful operation |\n| 401      | Unauthorized         |\n| 404      | User not found       |\n\n### Domains\n\nThe Domain API provides access to a list of available domains as well as\ndetailed information on a given domain.\n\n### List of available domains\n\n| HTTP Method | GET                               |\n|-------------|-----------------------------------|\n| End Point   | /domains                          |\n| Description | Get the list of available domains |\n\nRequest Parameters\n\n| **Name** | **Description**                                            | **Data Type** | **Required** |\n|----------|------------------------------------------------------------|---------------|--------------|\n| App_id   | URL encoded app ID by which the results are to be filtered | String        | No           |\n\nExample Request\n\n| curl -X 'GET' \\\\  'https://editor.swagger.io/domains' \\\\  -H 'accept: application/json' |\n|-----------------------------------------------------------------------------------------|\n\nResponse Parameters\n\n| **Name**    | **Description**                       | **Data Type** |\n|-------------|---------------------------------------|---------------|\n| id          | Unique identifier for the given user. | string        |\n| type        | types                                 | DKM           |\n| label       | Label                                 | string        |\n| description | description                           | string        |\n| has_dkm     | dkm                                   | string        |\n\nExample Response\n\n| [  {  \"id\": \"string\",  \"type\": \"Domain\",  \"label\": \"string\",  \"description\": \"string\",  \"has_dkm\": [  {  \"id\": \"string\",  \"type\": \"DKM\",  \"label\": \"string\"  }  ]  } ] |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\nResponse Status\n\n| **Name** | **Description**      |\n|----------|----------------------|\n| 200      | successful operation |\n| 401      | Unauthorized         |\n| 404      | resource not found   |\n\n### Details of a specific domain\n\n| HTTP Method | GET                              |\n|-------------|----------------------------------|\n| End Point   | /domains/{domain_id}             |\n| Description | Get details of a specific domain |\n\nRequest Parameters\n\n| **Name**  | **Description**                         | **Data Type** | **Required** |\n|-----------|-----------------------------------------|---------------|--------------|\n| domain_id | Unique identifier for the given domain. | String        | Yes          |\n\nExample Request\n\n|  curl GET https://{km_metadata_service_server}/domains/{domain_id}  |\n|---------------------------------------------------------------------|\n\nResponse Parameters\n\n| **Name**    | **Description** | **Data Type** |\n|-------------|-----------------|---------------|\n| id          | Id              | string        |\n| type        | Type            | dkm           |\n| label       | Label           | string        |\n| description | Description     | string        |\n| has_dkm     | dkm             | string        |\n\nExample Response\n\n| [  {  \"id\": \"string\",  \"type\": \"Domain\",  \"label\": \"string\",  \"description\": \"string\",  \"has_dkm\": [  {  \"id\": \"string\",  \"type\": \"DKM\",  \"label\": \"string\"  }  ]  } ] |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n\nResponse Status\n\n| **Name** | **Description**      |\n|----------|----------------------|\n| 200      | successful operation |\n| 401      | Unauthorized         |\n| 404      | resource not found   |\n\n### Applications\n\nThe Application API gives you access to a list of all the applications that have\nbeen registered in the system, as well as the ability to create, update, and\ndelete specific applications.\n\n### List of Registered Application in the System\n\n| HTTP Method | GET                                               |\n|-------------|---------------------------------------------------|\n| End Point   | /domains                                          |\n| Description | Get list of applications registered in the system |\n\nExample Request\n\n| curl -X 'GET' \\\\  'https://editor.swagger.io/applications' \\\\  -H 'accept: application/json' |\n|----------------------------------------------------------------------------------------------|\n\nResponse Parameters\n\n| **Name**  | **Description**                                                  | **Data Type** |\n|-----------|------------------------------------------------------------------|---------------|\n| id        | Unique identifier for the given application.                     | string        |\n| type      | types                                                            | DKM           |\n| label     | Label                                                            | string        |\n| has_owner | A list of agent IDs that represent the owners of the application | string        |\n| domains   | List of domains IDs applicable to this application.              | string        |\n\nExample Response\n\n| [  {  \"type\": \"Application\",  \"id\": \"string\",  \"label\": \"string\",  \"has_owner\": [  \"string\"  ],  \"domains\": [  \"string\"  ]  } ] |\n|---------------------------------------------------------------------------------------------------------------------------------|\n\nResponse Status\n\n| **Name** | **Description**      |\n|----------|----------------------|\n| 200      | successful operation |\n| 401      | Unauthorized         |\n\n\n"
servers:
  - url: 'https://test/apexrest'
    description: Mock Server
paths:
  /phoneVerification:
    put:
      tags:
        - Phone Verification
      summary: Check Method
      description: This WebService accepts PUT requests with a JSON body and below parameters that are wrapped in reqData object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/checkmethod'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/view'
      security:
        - Bearer: []
    post:
      tags:
        - Phone Verification
      summary: Start Method
      description: |-
        This WebService accepts POST requests with a JSON body and below parameters that are wrapped in reqData object.
        1. Testing
        2. Testing
        3. testing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/startmethod'
        description: ''
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/view'
      security:
        - Bearer: []
components:
  schemas:
    view:
      title: Response
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Text message sent to +1 123-456-7890
    startmethod:
      title: Start Method
      type: object
      properties:
        reqData:
          type: array
          items:
            $ref: '#/components/schemas/attributes'
      x-examples:
        example-1: {}
      description: ''
    checkmethod:
      title: Check Method
      type: object
      properties:
        reqData:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/attributes'
              - required:
                  - code
                type: object
                properties:
                  code:
                    type: integer
                    description: Verification Code
                    example: 123
    attributes:
      title: reqData
      type: object
      description: 'This module allows you to manage users, groups, and roles defined in the default security realm. You must be logged in as a member of the Administrators or ...'
      properties:
        phoneNumber:
          type: integer
          description: Phone Number_testing
          example: 1234567890
        countryCode:
          type: boolean
          description: Country Code
          example: false
        sid:
          type: string
          description: Will be provided to you once Twillio account is set up.
          example: bpmeusa
      required:
        - phoneNumber
        - countryCode
        - sid
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
